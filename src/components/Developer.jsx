/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 developer.glb -T 
Files: developer.glb [981.62KB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/developer-transformed.glb [395.08KB] (60%)
*/

import React, { useEffect, useRef } from "react";
import { useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

const Developer = ({ animationName = "salute", ...props }) => {
  const group = useRef();

  const { nodes, materials } = useGLTF("/models/human/vidu.glb");
  // const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // const { nodes, materials } = useGraph(clone);

  const { animations: idleAnimation } = useFBX("/models/animations/idle.fbx");
  const { animations: saluteAnimation } = useFBX(
    "/models/animations/salute.fbx"
  );
  const { animations: clappingAnimation } = useFBX(
    "/models/animations/clapping.fbx"
  );
  const { animations: victoryAnimation } = useFBX(
    "/models/animations/victory.fbx"
  );

  const { animations: dancingAnimation } = useFBX(
    "/models/animations/dancing.fbx"
  );

  console.log("Dancing Animations:", dancingAnimation);

  idleAnimation[0].name = "idle";
  saluteAnimation[0].name = "salute";
  clappingAnimation[0].name = "clapping";
  victoryAnimation[0].name = "victory";
  if (dancingAnimation.length > 0) {
    dancingAnimation[0].name = "dancing"; // Ensure animation has a name
  }

  const { actions } = useAnimations(
    [
      idleAnimation[0],
      saluteAnimation[0],
      clappingAnimation[0],
      victoryAnimation[0],
      dancingAnimation[0],
    ],
    group
  );

  useEffect(() => {
    const currentAction = actions[animationName] || actions["victory"]; // Fallback to "idle"
    console.log("Available actions:", actions);

    if (currentAction) {
      currentAction.reset().fadeIn(0.5).play();
      return () => currentAction?.fadeOut(0.5);
    }
  }, [animationName, actions]);

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Avatar"
        geometry={nodes.Wolf3D_Avatar.geometry}
        material={materials.Wolf3D_Avatar}
        skeleton={nodes.Wolf3D_Avatar.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences}
      />
    </group>
  );
};

useGLTF.preload("/models/human/vidu.glb");

export default Developer;
